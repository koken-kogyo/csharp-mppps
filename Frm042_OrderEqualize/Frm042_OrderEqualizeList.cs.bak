using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;

namespace MPPPS

{
    public partial class Frm042_OrderEqualize : Form
    {
        ///
        /// リスト形式
        /// 

        //        ///
        //        /// リスト形式: フォーム制御
        //        ///

        //        /// <summary>
        //        /// [CSV 読込] ボタンクリック時のイベント ハンドラー
        //        /// </summary>
        //        /// <param name="sender">送信オブジェクト</param>
        //        /// <param name="e">イベント引数</param>
        //        private void Btn_ReadCsvFile_Click(object sender, EventArgs e)
        //        {
        //            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

        //            // OpenFileDialog クラスのインスタンスを作成
        //            OpenFileDialog ofd = new OpenFileDialog()
        //            {
        //                FileName = "",                           // 既定のファイル名
        //                InitialDirectory = Common.OFD_INIT_DIR,  // 既定のディレクトリ名
        //                Filter = Common.OFD_FILE_TYPE_CSV,       // [ファイルの種類] の選択肢
        //                FilterIndex = 1,                         // [ファイルの種類] の既定値
        //                Title = Common.OFD_TITLE_OPEN,           // ダイアログのタイトル
        //                RestoreDirectory = true,                 // ダイアログを閉じる前に現在のディレクトリを復元
        //                CheckFileExists = true,                  // 存在しないファイル名前が指定されたとき警告を表示 (既定値: true)
        //                CheckPathExists = true                   // 存在しないパスが指定されたとき警告を表示 (既定値: true)
        //            };

        //            // ダイアログを表示
        //            if (ofd.ShowDialog() == DialogResult.OK)
        //            {
        //                // [開く] ボタンがクリックされたとき、選択されたファイル名を表示
        //                Console.WriteLine(ofd.FileName);

        //                DataTable dataTable = new DataTable();
        //                int csvCount = cmn.Fa.ReadCSVFile(ofd.FileName, Encoding.GetEncoding("shift-jis"), true, Common.TABLE_ID_D0415, ref dataTable);


        //                // DataGridView の内容を全行削除
        //                cmn.RemoveDagaGridViewRows(Dgv_MpOrderTbl);

        //                // DataGridView の書式設定
        //                FormatDataGridView(dataTable);

        //                // D0415 標準作業時間マスタのテーブル情報取得
        //                int dataCount = 0;
        //                DataSet dataSetTblInfo = new DataSet();
        //                dataCount = cmn.Dba.GetTableInfo(ref dataSetTblInfo, Common.TABLE_ID_D0415);
        //                if (dataCount <= 0)
        //                {
        //                    // テーブル情報なし
        //                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
        //                    string msgBodyExtStr = string.Format(Common.MSG_BODY_EXT_STR_TABLE_ID, Common.TABLE_ID_D0415);
        //                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_803, Common.MSG_TYPE_F, MessageBoxButtons.OK,
        //                                       Common.MSGBOX_TXT_FATAL, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, msgBodyExtStr);

        //                    // 件数表示クリア
        //                    Tsl_Msg.Text = null;
        //                }
        //                else
        //                {
        //                    // 書式チェックと数値補正
        //                    bool isValid = true;
        //                    CheckCsvData(dataTable, dataSetTblInfo, ref isValid);

        //                    // データ テーブルを DataGridView に反映して再描画
        //                    Dgv_MpOrderTbl.DataSource = dataTable;

        //                    // 再描画
        //                    Dgv_MpOrderTbl.Refresh();

        //                    if (isValid)
        //                    {
        //                        // 更新系ボタンを有効化
        //                        SetEnableDisableUpdatingButtons();

        //                        // 読み込み完了メッセージ表示
        //                        Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
        //                        cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_405, Common.MSG_TYPE_I, MessageBoxButtons.OK,
        //                                           Common.MSGBOX_TXT_INFO, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);

        //                        // 読み込み件数表示
        //                        Tsl_Msg.Text = csvCount + Common.TSL_TEXT_READ_FILE_COUNT;
        //                    }
        //                }
        //            }
        //        }

        //        /// <summary>
        //        /// [CSV 保存] ボタン クリック時のイベント ハンドラー
        //        /// </summary>
        //        /// <param name="sender">送信オブジェクト</param>
        //        /// <param name="e">イベント引数</param>
        //        private void Btn_SaveCsvFile_Click(object sender, EventArgs e)
        //        {
        //            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

        //            // SaveFileDialog クラスのインスタンスを作成
        //            SaveFileDialog sfd = new SaveFileDialog()
        //            {
        //                FileName = Common.TABLE_ID_D0415 + "_"
        //                         + Common.TABLE_NAME_D0415
        //                         + Common.CSV_FILE_EXT,           // 既定のファイル名
        //                InitialDirectory = Common.SFD_INIT_DIR,   // 既定のディレクトリ名
        //                Filter = Common.SFD_FILE_TYPE_CSV,        // [ファイルの種類] の選択肢
        //                FilterIndex = 1,                          // [ファイルの種類] の既定値
        //                Title = Common.SFD_TITLE_SAVE,            // ダイアログのタイトル
        //                RestoreDirectory = true,                  // ダイアログを閉じる前に現在のディレクトリを復元
        //                CheckFileExists = false,                  // 存在しないファイル名前が指定されたとき警告を表示 (既定値: true)
        //                CheckPathExists = true                    // 存在しないパスが指定されたとき警告を表示 (既定値: true)
        //            };

        //            // ダイアログを表示
        //            if (sfd.ShowDialog() == DialogResult.OK)
        //            {
        //                // [保存] または上書き確認で [はい] をクリック時、ファイルを保存
        //                string fileName = Path.Combine(sfd.InitialDirectory, sfd.FileName);
        //                int ret = cmn.Fa.SaveCSVFile(Dgv_MpOrderTbl, Path.Combine(fileName)); // 保存先を変更すると InitialDirectory が自動更新される

        //                switch (ret)
        //                {

        //                    case Common.SFD_RET_SAVE_FAILED: // 保存失敗
        //                        Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
        //                        cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_402, Common.MSG_TYPE_E,
        //                            MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error);
        //                        break;

        //                    case Common.SFD_RET_AUTH_FAILED: // 認証失敗
        //                        Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
        //                        cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_403, Common.MSG_TYPE_E,
        //                            MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error);
        //                        break;

        //                    case Common.SFD_RET_FILE_IN_USE: // ファイル使用中
        //                        Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
        //                        cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_404, Common.MSG_TYPE_E,
        //                            MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error);
        //                        break;
        //                    default: // 保存成功
        //                        // 保存ファイルを選択した状態でフォルダーを開く
        //                        Process.Start(Common.APP_EXPLORER, @"/select,""" + @fileName + "");
        //                        // 保存件数表示
        //                        Tsl_Msg.Text = ret + Common.TSL_TEXT_SAVE_FILE_COUNT;
        //                        break;
        //                }
        //            }
        //        }

        /// <summary>
        /// DataGridView セル フォーカス喪失時のイベント ハンドラー
        /// </summary>
        /// <param name="sender">送信オブジェクト</param>
        /// <param name="e">イベント引数</param>
        private void Dgv_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            DataGridView dgv = (DataGridView)sender;
            int rowIndex = e.RowIndex;
            int columnIndex = e.ColumnIndex;

            // 新しい行のセルでなく、セルの内容が変更されている時だけ検証する
            if (rowIndex == dgv.NewRowIndex || !dgv.IsCurrentCellDirty)
            {
                return;
            }

            DataGridViewRow dgvRow = dgv.Rows[rowIndex];
            DataGridViewColumn dgvColumn = dgv.Columns[columnIndex];
            string dgvHdrText = dgvColumn.HeaderText;
            string cellString = e.FormattedValue.ToString();

            // DataGridViewRow セル値チェック
            CheckDgvCellValue(dgvRow, rowIndex, columnIndex, dgvHdrText, cellString);
        }

        /// <summary>
        /// DataGridView の書式設定
        /// </summary>
        /// <param name="dgv">DataGridView</param>
        /// <param name="dataTable">データ テーブル</param>
        private void FormatDataGridView(DataGridView dgv, DataTable dataTable)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // データ テーブルの列名置換
            List<int> numD0415ColIdxList; // 数値列インデックス リスト
            cmn.ReplaceDataSetColumnName(Common.DB_CONFIG_MP, Common.TABLE_ID_D0415, ref dataTable, out numD0415ColIdxList);
            List<int> numD0445ColIdxList; // 数値列インデックス リスト
            cmn.ReplaceDataSetColumnName(Common.DB_CONFIG_MP, Common.TABLE_ID_D0445, ref dataTable, out numD0445ColIdxList);

            // DataGridView に一括設定
            dgv.SuspendLayout();
            dgv.DataSource = dataTable;

            // DataGridView のセル配置を変更
            for (int i = 0; i < numD0445ColIdxList.Count; i++)
            {
                // 数値なら右寄せ
                dgv.Columns[numD0445ColIdxList[i]].DefaultCellStyle.Alignment
                    = DataGridViewContentAlignment.MiddleRight;
            }
            dgv.ResumeLayout();
            dgv.Refresh();
        }

        /// <summary>
        /// DataGridViewRow セル値チェック
        /// </summary>
        /// <param name="dgvRow">DataGridViewRow</param>
        /// <param name="rowIndex">行インデックス</param>
        /// <param name="columnIndex">列インデックス</param>
        /// <param name="dgvHdrText">DataGridView 見出し</param>
        /// <param name="cellString">セル文字列</param>
        private void CheckDgvCellValue(DataGridViewRow dgvRow, int rowIndex, int columnIndex, string dgvHdrText, string cellString)
        {
            bool ret = false;
            int errColumnIndex;
            string errText;

            //switch (columnIndex)
            //{
            //    case (int)Common.Frm042DgvIdx.OdCd: // グループ コード
            //        {
            //            // グループ 名称マスター検索キー編集
            //            cmn.PkKM8420 = new PkKM8420();
            //            cmn.PkKM8420.OdCd = cellString;
            //            cmn.PkKM8420.IOKbn = Common.M0300_IOKBN_ALL;
            //            cmn.PkKM8420.IsInclusionSubCo = false;
            //            cmn.PkKM8420.IsTiedToKt = true;

            //            // グループ 存在チェック
            //            DataSet dataSetOd = new DataSet();
            //            if (cmn.Dba.GetMpEquipInfo(ref dataSetOd) > 0)
            //            {
            //                ret = true;
            //            }
            //            else
            //            {
            //                ret = false;
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.OdCd;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_ODCD;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.WkGrCd: // 切削刃具 コード
            //        {
            //            // 切削刃具 マスター検索キー編集
            //            cmn.PkD0415 = new PkD0415();
            //            cmn.PkD0415.OdCd = dgvRow.Cells[(int)Common.Frm042DgvIdx.OdCd].Value.ToString();
            //            cmn.PkD0415.WkGrCd = cellString;

            //            // 切削刃具存在チェック
            //            DataSet dataSetWkGr = new DataSet();
            //            if (cmn.Dba.GetWorkGroupInfo(ref dataSetWkGr) > 0)
            //            {
            //                ret = true;
            //            }
            //            else
            //            {
            //                ret = false;
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.WkGrCd;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_WKGRCD;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.ValDtF: // 発効年月日
            //        {
            //            // 日時妥当性チェック
            //            DateTime dt;
            //            ret = DateTime.TryParse(cellString, out dt);

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.ValDtF;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_VALDTF;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.WkSeq: // 作業順序
            //        {
            //            // 数値、桁数チェック
            //            int retCode = cmn.CheckNumericalNumber(cellString, Common.NUMERIC_UNSIGNED,
            //                        Common.D0415_WKSEQ_PRECISION, Common.D0415_WKSEQ_PRECISION, out string dstStr);
            //            if ((retCode == Common.RET_CD_OK_NUMERICAL_NUMBER) &&
            //                (retCode != Common.RET_CD_OK_NULL_OR_WHITESPC))
            //            {
            //                ret = true;
            //            }
            //            else
            //            {
            //                ret = false;
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.WkSeq;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_WKSEQ;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.CT: // サイクルタイム
            //        {
            //            // 数値、桁数チェック
            //            int retCode = cmn.CheckNumericalNumber(cellString, Common.NUMERIC_UNSIGNED,
            //                        Common.D0415_CT_PRECISION, Common.D0415_CT_SCALE, out string dstStr);
            //            if ((retCode == Common.RET_CD_OK_NUMERICAL_NUMBER) &&
            //                (retCode != Common.RET_CD_OK_NULL_OR_WHITESPC))
            //            {
            //                ret = true;
            //            }
            //            else
            //            {
            //                ret = false;
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.CT;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_CT;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.Note: // 備考
            //        {
            //            int dataLength = Common.D0415_NOTE_LENGTH;

            //            // 桁数チェック
            //            if (cellString.Length <= dataLength)
            //            {
            //                ret = true;
            //            }
            //            else
            //            {
            //                ret = false;
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.Note;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_NOTE;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.InstID:
            //        {
            //            // 原価管理システム利用者チェック
            //            cmn.PkD0415 = new PkD0415();
            //            cmn.PkD0415.UserId = cellString;
            //            string active = "";
            //            string authLv = "";
            //            ret = cmn.Dba.IsAuthrizedCMUser(ref active, ref authLv);
            //            // 結果判定
            //            if (ret)
            //            {
            //                // 登録ありのとき EM 担当者チェック
            //                cmn.IkM0010 = new IkM0010();
            //                cmn.IkM0010.TanCd = cellString;
            //                cmn.IkM0010.Passwd = "";
            //                bool isPasswdFree = true;
            //                string userName = "";
            //                string atgCd = "";
            //                // 結果を上書き
            //                ret = cmn.Dba.IsAuthrizedEMUser(isPasswdFree, ref userName, ref atgCd);
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.InstID;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_ID;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.InstDt:
            //        {
            //            // 日時妥当性チェック
            //            DateTime dt;
            //            ret = DateTime.TryParse(cellString, out dt);

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.InstDt;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_DT;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.UpdtID:
            //        {
            //            // 原価管理システム利用者チェック
            //            cmn.PkD0415 = new PkD0415();
            //            cmn.PkD0415.UserId = cellString;
            //            string active = "";
            //            string authLv = "";
            //            ret = cmn.Dba.IsAuthrizedCMUser(ref active, ref authLv);
            //            // 結果判定
            //            if (ret)
            //            {
            //                // 登録ありのとき EM 担当者チェック
            //                cmn.IkM0010 = new IkM0010();
            //                cmn.IkM0010.TanCd = cellString;
            //                cmn.IkM0010.Passwd = "";
            //                bool isPasswdFree = true;
            //                string userName = "";
            //                string atgCd = "";
            //                // 結果を上書き
            //                ret = cmn.Dba.IsAuthrizedEMUser(isPasswdFree, ref userName, ref atgCd);
            //            }

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.UpdtID;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_ID;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;

            //    case (int)Common.Frm042DgvIdx.UpdtDt:
            //        {
            //            // 日時妥当性チェック
            //            DateTime dt;
            //            ret = DateTime.TryParse(cellString, out dt);

            //            // DataGridViewRow エラー再設定
            //            errColumnIndex = (int)Common.Frm042DgvIdx.UpdtDt;
            //            errText = dgvHdrText + ": " + Common.FRM24_DGV_ERR_DT;
            //            ResetDgvErrorText(dgvRow, ret, rowIndex, errColumnIndex, errText);
            //        }
            //        break;
            //}
        }

        /// <summary>
        /// DataGridViewRow エラー再設定
        /// </summary>
        /// <param name="dgvRow">DataGridViewRow</param>
        /// <param name="isNormal">正常か (false: 異常, true: 正常)</param>
        /// <param name="rowIndex">行インデックス</param>
        /// <param name="errColumnIndex">エラー列インデックス</param>
        /// <param name="errText">エラー文字列</param>
        private void ResetDgvErrorText(DataGridViewRow dgvRow, bool isNormal, int rowIndex, int errColumnIndex, string errText)
        {
            // 既存エラー判定
            if (dgvErrors.Count <= 0) // 既存エラーなし
            {
                // 結果判定
                if (isNormal) // 正常のとき
                {
                    // なにもしない
                    ;
                }
                else // 異常のとき
                {
                    // エラー表示
                    dgvRow.ErrorText = errText;
                    cmn.DgvErrIndex = errColumnIndex;

                    // エラー リストに追加
                    DgvError dgvError = new DgvError();
                    dgvError.RowIndex = rowIndex;
                    dgvError.ColumnIndex = errColumnIndex;
                    dgvError.ErrorText = errText;
                    dgvErrors.Add(dgvError);
                }
                return;
            }

            // 結果判定
            if (isNormal) // 正常のとき
            {
                // 自行自列のエラーを探索してリストから削除
                foreach (var dgvError in dgvErrors)
                {
                    // 自行以外は無視
                    if (dgvError.RowIndex != rowIndex)
                    {
                        continue;
                    }

                    // 自列以外は無視
                    if (dgvError.ColumnIndex != errColumnIndex)
                    {
                        continue;
                    }

                    // 自行自列
                    {
                        dgvErrors.RemoveAt(dgvErrors.IndexOf(dgvError));

                        // エラー表示をクリア
                        dgvRow.ErrorText = null;
                        cmn.DgvErrIndex = 0;

                        // 自行の他のエラーを探索
                        for (int index = dgvErrors.Count - 1; index >= 0; index--)
                        {
                            if (dgvErrors[index].RowIndex == rowIndex)
                            {
                                // 直近のエラーを再表示
                                dgvRow.ErrorText = dgvErrors[index].ErrorText;
                                cmn.DgvErrIndex = dgvErrors[index].ColumnIndex;
                                break;
                            }
                        }
                    }
                    break; // ループを脱出
                }
                return;
            }

            // 結果判定
            if (!isNormal) // 異常のとき
            {
                // エラーを上書き表示
                dgvRow.ErrorText = errText;
                cmn.DgvErrIndex = errColumnIndex;

                // エラー リスト登録済みチェック
                bool isDupe = false;
                foreach (var dgvError in dgvErrors)
                {
                    // 自行以外は無視
                    if (dgvError.RowIndex != rowIndex)
                    {
                        continue;
                    }

                    // 自列以外は無視
                    if (dgvError.ColumnIndex != errColumnIndex)
                    {
                        continue;
                    }

                    // 自行自列 (登録済み)
                    {
                        isDupe = true;
                        break;
                    }
                }

                // エラー登録判定
                if (!isDupe) // 同一エラーの登録なし
                {
                    // エラー リストに追加
                    DgvError dgvError = new DgvError();
                    dgvError.RowIndex = rowIndex;
                    dgvError.ColumnIndex = errColumnIndex;
                    dgvError.ErrorText = errText;
                    dgvErrors.Add(dgvError);
                }
                return;
            }

        }

        ///
        /// リスト形式: データベース アクセス
        /// 

        /// <summary>
        /// D0415 切削生産計画ファイル主キー、 D0445 切削生産計画日程ファイル ユニーク キー設定 (リスト形式)
        /// </summary>
        private void SetCuttingProdPlanInfoKeyfromList(int rowCnt)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            //// 主キーを設定
            //cmn.PkD0415 = new PkD0415();
            DataGridViewRow dgvRow = Dgv_MpSimOdrTbl.Rows[rowCnt];

            // テーブル名を判定
            if (dgvRow.Cells[(int)Common.Frm042DgvIdx.TableName].Value.ToString().Trim() == Common.TABLE_ID_D0415)
            {
                // D0415 生産計画ファイル 主キー設定
                SetCuttingProdPlanPKeyfromList(rowCnt);
            }
            else if (dgvRow.Cells[(int)Common.Frm042DgvIdx.TableName].Value.ToString().Trim() == Common.TABLE_ID_D0445)
            {
                // D0445 生産計画日程ファイル ユニーク キー設定
                SetCuttingProdScheduleUKeyfromList(rowCnt);
            }
            else
            {
                // テーブル名エラー
                ;
            }
        }
        
        /// <summary>
        /// D0415 切削生産計画ファイル主キー設定 (リスト形式)
        /// </summary>
        private void SetCuttingProdPlanPKeyfromList(int rowCnt)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // キー値の取得は現状 DataGridView から行う
            DataGridViewRow dgvRow = Dgv_MpCurOdrTbl.Rows[rowCnt];

            // 主キーを設定
            cmn.PkD0415 = new PkD0415();

            // 手配 No
            cmn.PkD0415.OdrNo = dgvRow.Cells[(int)Common.Frm042DgvIdx.OdrNo].Value.ToString().Trim();
            // 切削工程順序
            cmn.PkD0415.McSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.McSeq].Value.ToString().Trim());
            // 手配分割 SEQ
            cmn.PkD0415.SplitSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.SplitSeq].Value.ToString().Trim());
        }

        /// <summary>
        /// D0445 切削生産計画日程ファイル ユニーク キー設定 (リスト形式)
        /// </summary>
        private void SetCuttingProdScheduleUKeyfromList(int rowCnt)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // キー値の取得は現状 DataGridView から行う
            DataGridViewRow dgvRow = Dgv_MpCurOdrTbl.Rows[rowCnt];

            // ユニーク キーを設定
            cmn.UqD0445 = new UqD0445();

            // 手配先コード
            cmn.UqD0445.OdCd = dgvRow.Cells[(int)Common.Frm042DgvIdx.OdCd].Value.ToString().Trim();
            // 計画No.
            cmn.UqD0445.PlnNo = dgvRow.Cells[(int)Common.Frm042DgvIdx.PlnNo].Value.ToString().Trim();
            // 手配No.
            cmn.UqD0445.OdrNo = dgvRow.Cells[(int)Common.Frm042DgvIdx.OdrNo].Value.ToString().Trim();
            // 工程順序
            cmn.UqD0445.KtSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.KtSeq].Value.ToString().Trim());
            // SEQ
            cmn.UqD0445.Seq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.Seq].Value.ToString().Trim());
            // 切削工程順序
            cmn.UqD0445.McSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.McSeq].Value.ToString().Trim());
            // 手配分割 SEQ
            cmn.UqD0445.SplitSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.SplitSeq].Value.ToString().Trim());
        }

        /// <summary>
        /// D0415 切削生産計画ファイル データ項目設定 (リスト形式)
        /// </summary>
        /// <param name="opeCd">処理種別</param>
        /// <param name="rowCnt">行</param>
        private void SetCuttingProdPlanDatafromList(char opeCd, int rowCnt)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            DataGridViewRow dgvRow = Dgv_MpSimOdrTbl.Rows[rowCnt];
            cmn.DrD0415 = new DrD0415();

            // 手配分割 SEQ
            cmn.DrD0415.SplitSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.SplitSeq].Value.ToString().Trim());
            // 確定完了予定日
            cmn.DrD0415.KEdDt = Convert.ToDateTime(dgvRow.Cells[(int)Common.Frm042DgvIdx.EdDt].Value.ToString().Trim());
            // 確定完了予定時刻
            cmn.DrD0415.KEdTim = dgvRow.Cells[(int)Common.Frm042DgvIdx.EdTim].Value.ToString().Trim();
            // 確定手配数
            cmn.DrD0415.KOdrQty = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.KtSeq].Value.ToString().Trim());
            // 確定設備コード
            cmn.DrD0415.KMcCd = dgvRow.Cells[(int)Common.Frm042DgvIdx.McCd].Value.ToString().Trim();
        }

        /// <summary>
        /// D0445 切削生産計画日程ファイル データ項目設定 (リスト形式)
        /// </summary>
        /// <param name="opeCd">処理種別</param>
        /// <param name="rowCnt">行</param>
        private void SetCuttingProdScheduleDatafromList(char opeCd, int rowCnt)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            DataGridViewRow dgvRow = Dgv_MpSimOdrTbl.Rows[rowCnt];
            cmn.DrD0445 = new DrD0445();

            // 手配分割 SEQ
            cmn.DrD0445.SplitSeq = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.SplitSeq].Value.ToString().Trim());
            // 確定完了予定日
            cmn.DrD0445.KEdDt = Convert.ToDateTime(dgvRow.Cells[(int)Common.Frm042DgvIdx.EdDt].Value.ToString().Trim());
            // 確定完了予定時刻
            cmn.DrD0445.KEdTm = dgvRow.Cells[(int)Common.Frm042DgvIdx.EdTim].Value.ToString().Trim();
            // 確定手配数
            cmn.DrD0445.KOdrQty = Convert.ToInt32(dgvRow.Cells[(int)Common.Frm042DgvIdx.KtSeq].Value.ToString().Trim());
            // 確定設備コード
            cmn.DrD0445.KMcCd = dgvRow.Cells[(int)Common.Frm042DgvIdx.McCd].Value.ToString().Trim();
        }

        /// <summary>
        /// 切削生産計画情報リスト取得 (D0415 切削生産計画ファイル)
        /// </summary>
        /// <param name="isAlertMsg">メッセージ警告 (false: しない, true: する)</param>
        /// <returns>結果 (0≦: データ件数, 0≧: エラー)</returns>
        private int GetCuttingProdPlanDatafromList(bool isAlertMsg)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // [フォーム種別] タブ コントロールの有効化
            Tbc_FormType.Enabled = Common.CTL_ENABLED_ENABLE;

            // 切削オーダー平準化情報検索
            // 現状全件
            DataSet curDataSet = new DataSet();
            int curRet = cmn.Dba.GetOrderEqualizeInfo(ref curDataSet, Common.D0415_TARGET_CUR_ALL);
            //// 変更後全件
            //DataSet simDataSet = new DataSet();
            //int simRet = cmn.Dba.GetOrderEqualizeInfo(ref simDataSet, Common.D0415_TARGET_SIM_ALL);

            if (curRet > 0)
            //if ((curRet > 0) && (s/*i*/mRet > 0))
            {
                // 現状 DataGridView の書式設定
                Dgv_MpCurOdrTbl.Enabled = true;
                FormatDataGridView(Dgv_MpCurOdrTbl, curDataSet.Tables[0]);

                //// 変更後 DataGridView の書式設定
                //Dgv_MpSimOdrTbl.Enabled = true;
                //FormatDataGridView(Dgv_MpSimOdrTbl, simDataSet.Tables[0]);
                //// 指定列の読み取り専用設定
                //SetDgwColumnsReadOnly();

                // 更新系ボタンを有効化
                SetEnableDisableUpdatingButtons();

                // 検索件数表示
                Tsl_Msg.Text = curRet + Common.TSL_TEXT_SELECT_TABLE_COUNT;
            }
            else
            {
                if (isAlertMsg == Common.MSG_ALERT_YES) // 警告する
                {
                    // 該当データなし
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_305, Common.MSG_TYPE_W,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_WARN, MessageBoxIcon.Warning);
                }
                else // 警告しない
                {
                }
                // 更新系ボタンを無効化
                SetEnableDisableUpdatingButtons();
            }
            return curRet;
        }


        /// <summary>
        /// 切削生産計画日程情報リスト取得 (D0445 切削生産計画時日程ファイル)
        /// </summary>
        /// <param name="isAlertMsg">メッセージ警告 (false: しない, true: する)</param>
        /// <returns>結果 (0≦: データ件数, 0≧: エラー)</returns>
        private int GetCuttingProdScheduleDatafromList(bool isAlertMsg)
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // [フォーム種別] タブ コントロールの有効化
            Tbc_FormType.Enabled = Common.CTL_ENABLED_ENABLE;

            // 切削オーダー平準化情報検索
            // 現状全件
            //DataSet curDataSet = new DataSet();
            //int curRet = cmn.Dba.GetOrderEqualizeInfo(ref curDataSet, Common.D0445_TARGET_CUR_ALL);
            // 変更後全件
            DataSet simDataSet = new DataSet();
            int simRet = cmn.Dba.GetOrderEqualizeInfo(ref simDataSet, Common.D0445_TARGET_SIM_ALL);

            //if ((curRet > 0) && (simRet > 0))
            if (simRet > 0)
            {
                //現在 DataGridView の書式設定
                //Dgv_MpCurOdrTbl.Enabled = true;
                //FormatDataGridView(Dgv_MpCurOdrTbl, curDataSet.Tables[0]);

                // 変更後 DataGridView の書式設定
                Dgv_MpSimOdrTbl.Enabled = true;
                FormatDataGridView(Dgv_MpSimOdrTbl, simDataSet.Tables[0]);
                // 指定列の読み取り専用設定
                SetDgwColumnsReadOnly();

                // 更新系ボタンを有効化
                SetEnableDisableUpdatingButtons();

                // 検索件数表示
                //Tsl_Msg.Text = curRet + Common.TSL_TEXT_SELECT_TABLE_COUNT;
                Tsl_Msg.Text = simRet + Common.TSL_TEXT_SELECT_TABLE_COUNT;
            }
            else
            {
                if (isAlertMsg == Common.MSG_ALERT_YES) // 警告する
                {
                    // 該当データなし
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_305, Common.MSG_TYPE_W,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_WARN, MessageBoxIcon.Warning);
                }
                else // 警告しない
                {
                }
                // 更新系ボタンを無効化
                SetEnableDisableUpdatingButtons();
            }
            //return curRet;
            return simRet;
        }

        /// <summary>
        /// DataGridView 列読み取り専用設定
        /// </summary>
        private void SetDgwColumnsReadOnly()
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // 変更後 DataGridView の指定列を読み取り専用にする
            Dgv_MpSimOdrTbl.Columns["手配先ｺｰﾄﾞ"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["計画No"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["手配No"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["工程順序"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["グループコード"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["設備稼働時間"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["段取り時間"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["品番"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["SEQ"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["切削工程順序"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["工程CT合計"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["工程段取り時間合計"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["工程その他時間合計"].ReadOnly = true;
            Dgv_MpSimOdrTbl.Columns["テーブル名"].ReadOnly = true;
        }

        /// <summary>
        /// 切削生産計画情報リスト登録/更新 (D0415 切削生産計画ファイル, D0445 切削生産計画時日別ファイル)
        /// </summary>
        private void MergeCuttingProdPlan()
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // 登録または更新確認
            Debug.WriteLine(Common.MEGBOX_TXT_QUESTION + ": " + MethodBase.GetCurrentMethod().Name);
            DialogResult dialogResult = cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_321, Common.MSG_TYPE_Q,
                MessageBoxButtons.OKCancel, Common.MSGBOX_TXT_CONF, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

            if (dialogResult == DialogResult.OK) // [OK] クリック時
            {
                // DatGridView に表示中の行から D0415 段取マスターの主キーを生成し、データがあれば更新、なければ登録する

                int[] insRowCnt = new int[3] { 0, 0, 0 }; // 処理件数 (登録)
                int[] updRowCnt = new int[3] { 0, 0, 0 }; // 処理件数 (更新)

                int dgvRowCnt = Dgv_MpSimOdrTbl.Rows.Count - 1; // 追加行 "*" は除外 
                for (int rowCnt = 0; rowCnt < dgvRowCnt; rowCnt++)
                {
                    // 主キーを設定
                    DataGridViewRow dgvRow = Dgv_MpSimOdrTbl.Rows[rowCnt];

                    // テーブル名により操作するテーブルを選択
                    if (dgvRow.Cells[(int)Common.Frm042DgvIdx.TableName].Value.ToString().Trim() == Common.TABLE_ID_D0415)
                    {
                        // D0415 生産計画ファイル 主キー設定
                        SetCuttingProdPlanPKeyfromList(rowCnt);

                        // 既存データの有無を確認
                        DataSet dataSet = new DataSet();
                        cmn.Dba.GetOrderEqualizeInfo(ref dataSet);

                        if (dataSet.Tables[0].Rows.Count > 0) // データあり
                        {
                            // D0415 切削生産計画ファイル データ項目設定
                            SetCuttingProdPlanDatafromList(Common.OPE_CD_UPD, rowCnt);

                            // データを更新
                            if (cmn.Dba.MergeCycleTimeInfo() > 0)
                            {
                                // 更新成功
                                updRowCnt[Common.IDX_NORMAL_END]++;
                            }
                            else
                            {
                                // 更新失敗
                                updRowCnt[Common.IDX_ABNORMAL_END]++;
                            }
                        }
                        else // データなし
                        {
                            // D0415 切削生産計画ファイル データ項目設定
                            SetCuttingProdPlanDatafromList(Common.OPE_CD_INS, rowCnt);

                            // データを登録
                            if (cmn.Dba.MergeCycleTimeInfo() > 0)
                            {
                                // 登録成功
                                insRowCnt[Common.IDX_NORMAL_END]++;
                            }
                            else
                            {
                                // 登録失敗
                                insRowCnt[Common.IDX_ABNORMAL_END]++;
                            }
                        }
                    }
                    else
                    {
                        // D0445 生産計画日程ファイル ユニーク キー設定
                        SetCuttingProdScheduleUKeyfromList(rowCnt);

                        // 既存データの有無を確認
                        DataSet dataSet = new DataSet();
                        cmn.Dba.GetOrderEqualizeInfo(ref dataSet);

                        if (dataSet.Tables[0].Rows.Count > 0) // データあり
                        {
                            // D0445 生産計画日程ファイル データ項目設定
                            SetCuttingProdScheduleDatafromList(Common.OPE_CD_UPD, rowCnt);

                            // データを更新
                            if (cmn.Dba.MergeCycleTimeInfo() > 0)
                            {
                                // 更新成功
                                updRowCnt[Common.IDX_NORMAL_END]++;
                            }
                            else
                            {
                                // 更新失敗
                                updRowCnt[Common.IDX_ABNORMAL_END]++;
                            }
                        }
                        else // データなし
                        {
                            // D0415 切削生産計画ファイル データ項目設定
                            SetCuttingProdPlanDatafromList(Common.OPE_CD_INS, rowCnt);

                            // データを登録
                            if (cmn.Dba.MergeCycleTimeInfo() > 0)
                            {
                                // 登録成功
                                insRowCnt[Common.IDX_NORMAL_END]++;
                            }
                            else
                            {
                                // 登録失敗
                                insRowCnt[Common.IDX_ABNORMAL_END]++;
                            }
                        }
                    }



                }
                // 結果表示
                // 拡張メッセージ本文編集
                string extMsgBodyTxt = EditProcResCntMsg(Common.OPE_CD_INS, insRowCnt) + EditProcResCntMsg(Common.OPE_CD_UPD, updRowCnt);
                if (dgvRowCnt == insRowCnt[Common.IDX_NORMAL_END] + updRowCnt[Common.IDX_NORMAL_END]) // 正常終了 (全件成功)
                {
                    // 登録または更新成功
                    Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_323, Common.MSG_TYPE_I,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_INFO, MessageBoxIcon.Information, extMsgBodyTxt);
                }
                else if (dgvRowCnt == insRowCnt[Common.IDX_ABNORMAL_END] + updRowCnt[Common.IDX_ABNORMAL_END]) // 異常終了 (全件失敗)
                {
                    // 登録および更新失敗
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_324, Common.MSG_TYPE_E,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error, extMsgBodyTxt);
                }
                else // 異常終了 (一部失敗)
                {
                    // 登録または更新失敗あり
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_325, Common.MSG_TYPE_E,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error, extMsgBodyTxt);
                }
            }
            else // [キャンセル] クリック時
            {
                // 登録および更新中止
                Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
                cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_322, Common.MSG_TYPE_I,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_INFO, MessageBoxIcon.Information);
            }
            // DataGridView を念のため再描画
            Dgv_MpSimOdrTbl.Refresh();

            // 更新系ボタン有効無効再設定
            SetEnableDisableUpdatingButtons();
        }

        /// <summary>
        /// 切削生産計画情報リスト削除 (D0415 切削生産計画ファイル, D0445 切削生産計画時日別ファイル)
        /// </summary>
        private void DeleteListData()
        {
            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

            // DatGridView に表示中の行から D0415 切削生産計画ファイルの主キーを生成して削除する

            int[] delRowCnt = new int[3] { 0, 0, 0 }; // 処理件数

            // 削除確認
            Debug.WriteLine(Common.MEGBOX_TXT_QUESTION + ": " + MethodBase.GetCurrentMethod().Name);
            DialogResult dialogResult = cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_308, Common.MSG_TYPE_Q,
                MessageBoxButtons.OKCancel, Common.MSGBOX_TXT_CONF, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

            if (dialogResult == DialogResult.OK) // [OK] クリック時
            {
                // 選択中の行を削除
                DataGridViewSelectedRowCollection src = Dgv_MpSimOdrTbl.SelectedRows;
                for (int i = src.Count - 1; i >= 0; i--) // この部分
                {
                    // 切削生産計画ファイル主キー設定
                    SetCuttingProdPlanInfoKeyfromList(src[i].Index);

                    // テーブルからデータを削除
                    int ret = cmn.Dba.DeleteCuttingProdPlanInfo();
                    if (ret > 0)
                    {
                        // 正常終了
                        delRowCnt[Common.IDX_NORMAL_END]++;

                        // DataGridView から行を削除
                        Dgv_MpSimOdrTbl.Rows.RemoveAt(src[i].Index);
                    }
                    else if (ret == 0)
                    {
                        // 該当データなし
                        delRowCnt[Common.IDX_NO_DATA]++;
                    }
                    else
                    {
                        // 異常終了
                        delRowCnt[Common.IDX_ABNORMAL_END]++;
                        break; // 処理を打ち切り
                    }
                }
                // 結果表示
                string extMsgBodyTxt = EditProcResCntMsg(Common.OPE_CD_DEL, delRowCnt); // 拡張メッセージ本文

                if (delRowCnt[Common.IDX_ABNORMAL_END] > 0)  // 異常終了発生
                {
                    // データベース エラー
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_802, Common.MSG_TYPE_F,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_FATAL, MessageBoxIcon.Error, extMsgBodyTxt);
                }
                else if (src.Count == delRowCnt[Common.IDX_NO_DATA])
                {
                    // 全件削除失敗
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_317, Common.MSG_TYPE_E,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error, extMsgBodyTxt);
                }
                else if (delRowCnt[Common.IDX_NO_DATA] > 0)
                {
                    // 削除失敗あり
                    Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_317, Common.MSG_TYPE_E,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error, extMsgBodyTxt);
                }
                else if (src.Count == delRowCnt[Common.IDX_NORMAL_END])
                {
                    // 削除成功
                    Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_314, Common.MSG_TYPE_I,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_INFO, MessageBoxIcon.Information, extMsgBodyTxt);
                }
                else
                {
                    // 削除中止
                    Debug.WriteLine(Common.MSGBOX_TXT_INFO + ": " + MethodBase.GetCurrentMethod().Name);
                    cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_311, Common.MSG_TYPE_I,
                        MessageBoxButtons.OK, Common.MSGBOX_TXT_INFO, MessageBoxIcon.Information, extMsgBodyTxt);
                }
                // 再描画
                Dgv_MpSimOdrTbl.Refresh();

                // 更新系ボタン有効無効再設定
                SetEnableDisableUpdatingButtons();
            }
        }

        //        ///
        //        /// リスト形式: ファイル アクセス
        //        ///

        //        /// <summary>
        //        /// CSV データ チェック
        //        /// </summary>
        //        /// <param name="dataTable">CSV データ テーブル</param>
        //        /// <param name="dataSetTblInfo">切削生産計画ファイル テーブル情報</param>
        //        /// <param name="isValid"></param>
        //        private void CheckCsvData(DataTable dataTable, DataSet dataSetTblInfo, ref bool isValid)
        //        {
        //            Debug.WriteLine("[MethodName] " + MethodBase.GetCurrentMethod().Name);

        //            // 行数分まわす
        //            foreach (DataRow dataRow in dataTable.Rows)
        //            {
        //                int rowIndex = dataTable.Rows.IndexOf(dataRow);

        //                // 列数分まわす
        //                foreach (DataColumn dataColumn in dataTable.Columns)
        //                {
        //                    // 列情報取得
        //                    int columnIndex = dataTable.Columns.IndexOf(dataColumn);
        //                    DataRow dr = dataSetTblInfo.Tables[0].Rows[columnIndex];
        //                    string[] cmtArr = dr.Field<string>(Common.USER_COL_COMMENTS_INDEX_COMMENTS).ToString().Split(':');

        //                    switch (columnIndex)
        //                    {
        //                        case (int)Common.D0415ClmIdx.OdCd: // グループ コード
        //                            {
        //                                // グループ 名称マスター検索キー編集
        //                                cmn.PkKM8420 = new PkKM8420();
        //                                cmn.PkKM8420.OdCd = dataRow[(int)Common.D0415ClmIdx.OdCd].ToString();
        //                                cmn.PkKM8420.IOKbn = Common.M0300_IOKBN_ALL;
        //                                cmn.PkKM8420.IsInclusionSubCo = false;
        //                                cmn.PkKM8420.IsTiedToKt = true;

        //                                // グループ 存在チェック
        //                                DataSet dataSetOd = new DataSet();
        //                                cmn.Dba.GetMpEquipInfo(ref dataSetOd);
        //                                isValid = cmn.IsDataExisting(dataSetOd);
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.WkGrCd: // 切削刃具 コード
        //                            {
        //                                // 切削刃具 マスター検索キー編集
        //                                cmn.PkD0415 = new PkD0415();
        //                                cmn.PkD0415.OdCd = dataRow[(int)Common.D0415ClmIdx.OdCd].ToString();
        //                                cmn.PkD0415.WkGrCd = dataRow[(int)Common.D0415ClmIdx.WkGrCd].ToString();

        //                                // 切削刃具存在チェック
        //                                DataSet dataSetWkGr = new DataSet();
        //                                cmn.Dba.GetWorkGroupInfo(ref dataSetWkGr);
        //                                isValid = cmn.IsDataExisting(dataSetWkGr);
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.HmCd: // 品番
        //                            {
        //                                // 品目マスター検索キー編集
        //                                cmn.PkM0500 = new PkM0500();
        //                                cmn.PkM0500.HmCd = dataRow[(int)Common.D0415ClmIdx.HmCd].ToString();

        //                                // 品番存在チェック
        //                                DataSet dataSetHm = new DataSet();
        //                                cmn.Dba.GetItemInfo(ref dataSetHm);
        //                                isValid = cmn.IsDataExisting(dataSetHm);
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.ValDtF: // 発効年月日
        //                            {
        //                                // 日時妥当性チェック
        //                                DateTime dt;
        //                                if (!DateTime.TryParse(dataRow[(int)Common.D0415ClmIdx.ValDtF].ToString(), out dt))
        //                                {
        //                                    // 不正な書式
        //                                    isValid = false;
        //                                }
        //                                else
        //                                {
        //                                    // OK なら日付に変換して上書き
        //                                    dataRow.SetField<string>(columnIndex, dt.ToShortDateString());
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.WkSeq: // 作業順序
        //                            {
        //                                int dataPrecision = 0;
        //                                int dataScale = 0;

        //                                // 精度取得
        //                                dataPrecision = Convert.ToInt32(dr.Field<decimal>(Common.USER_TAB_COLUMNS_DATA_PRECISION));

        //                                // 有効桁数取得 
        //                                dataScale = Convert.ToInt32(dr.Field<decimal>(Common.USER_TAB_COLUMNS_DATA_SCALE));

        //                                // NULL チェック
        //                                string nullable = dr.Field<string>(Common.USER_TAB_COLUMNS_NULLABLE);
        //                                if (nullable == Common.USER_TAB_COLUMNS_NULLABLE_NO)
        //                                {
        //                                    if (dataRow[(int)Common.D0415ClmIdx.WkSeq].ToString() == null)
        //                                    {
        //                                        // NULL 不可
        //                                        isValid = false;
        //                                        break;
        //                                    }
        //                                }

        //                                // 数値、桁数チェック
        //                                int ret = cmn.CheckNumericalNumber(dataRow[(int)Common.D0415ClmIdx.WkSeq].ToString(), Common.NUMERIC_UNSIGNED,
        //                                         dataPrecision, dataScale, out string dstStr);

        //                                // エラー判定
        //                                if ((ret != Common.RET_CD_OK_NUMERICAL_NUMBER) && (ret != Common.RET_CD_OK_NULL_OR_WHITESPC))
        //                                {
        //                                    // 変換 NG
        //                                    isValid = false;
        //                                }
        //                                else
        //                                {
        //                                    // 変換 OK なら上書き
        //                                    dataRow.SetField<decimal>(columnIndex, Convert.ToDecimal(dstStr));
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.CT: // サイクルタイム
        //                            {
        //                                int dataPrecision = 0;
        //                                int dataScale = 0;

        //                                // 精度取得
        //                                dataPrecision = Convert.ToInt32(dr.Field<decimal>(Common.USER_TAB_COLUMNS_DATA_PRECISION));

        //                                // 有効桁数取得 
        //                                dataScale = Convert.ToInt32(dr.Field<decimal>(Common.USER_TAB_COLUMNS_DATA_SCALE));

        //                                // NULL チェック
        //                                string nullable = dr.Field<string>(Common.USER_TAB_COLUMNS_NULLABLE);
        //                                if (nullable == Common.USER_TAB_COLUMNS_NULLABLE_NO)
        //                                {
        //                                    if (dataRow[(int)Common.D0415ClmIdx.CT].ToString() == null)
        //                                    {
        //                                        // NULL 不可
        //                                        isValid = false;
        //                                        break;
        //                                    }
        //                                }

        //                                // 数値、桁数チェック
        //                                int ret = cmn.CheckNumericalNumber(dataRow[(int)Common.D0415ClmIdx.CT].ToString(), Common.NUMERIC_UNSIGNED,
        //                                         dataPrecision, dataScale, out string dstStr);

        //                                // エラー判定
        //                                if ((ret != Common.RET_CD_OK_NUMERICAL_NUMBER) && (ret != Common.RET_CD_OK_NULL_OR_WHITESPC))
        //                                {
        //                                    // 変換 NG
        //                                    isValid = false;
        //                                }
        //                                else
        //                                {
        //                                    // 変換 OK なら上書き
        //                                    dataRow.SetField<decimal>(columnIndex, Convert.ToDecimal(dstStr));
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.Note: // 備考
        //                            {
        //                                int dataLength = 0;

        //                                // 桁数取得
        //                                dataLength = Convert.ToInt32(dr.Field<decimal>(Common.USER_TAB_COLUMNS_DATA_LENGTH));

        //                                // 桁数チェック
        //                                if (dataRow[(int)Common.D0415ClmIdx.Note].ToString().Length > dataLength)
        //                                {
        //                                    // 桁数超過
        //                                    isValid = false;
        //                                    break;
        //                                }
        //                                // NULL チェック
        //                                string nullable = dr.Field<string>(Common.USER_TAB_COLUMNS_NULLABLE);
        //                                if (nullable == Common.USER_TAB_COLUMNS_NULLABLE_NO)
        //                                {
        //                                    // 桁数チェック
        //                                    if (dataRow[(int)Common.D0415ClmIdx.Note].ToString() == null)
        //                                    {
        //                                        // NULL 不可
        //                                        isValid = false;
        //                                        break;
        //                                    }
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.InstID:
        //                            {
        //                                // 原価管理システム利用者チェック
        //                                cmn.PkD0415 = new PkD0415();
        //                                cmn.PkD0415.UserId = dataRow[(int)Common.D0415ClmIdx.InstID].ToString();
        //                                string active = "";
        //                                string authLv = "";
        //                                if (!cmn.Dba.IsAuthrizedCMUser(ref active, ref authLv))
        //                                {
        //                                    // 利用者登録なし
        //                                    isValid = false;
        //                                }

        //                                // EM 担当者チェック
        //                                cmn.IkM0010 = new IkM0010();
        //                                cmn.IkM0010.TanCd = dataRow[(int)Common.D0415ClmIdx.InstID].ToString();
        //                                cmn.IkM0010.Passwd = "";
        //                                bool isPasswdFree = true;
        //                                string userName = "";
        //                                string atgCd = "";
        //                                if (!cmn.Dba.IsAuthrizedEMUser(isPasswdFree, ref userName, ref atgCd))
        //                                {
        //                                    // 担当者登録なし
        //                                    isValid = false;
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.InstDt:
        //                            {
        //                                // 日時妥当性チェック
        //                                DateTime dt;
        //                                if (!DateTime.TryParse(dataRow[(int)Common.D0415ClmIdx.InstDt].ToString(), out dt))
        //                                {
        //                                    // 不正な書式
        //                                    isValid = false;
        //                                }
        //                                else
        //                                {
        //                                    // OK なら日時に変換して上書き
        //                                    dataRow.SetField<string>(columnIndex, dt.ToString());
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.UpdtID:
        //                            {
        //                                // 原価管理システム利用者チェック
        //                                cmn.PkD0415 = new PkD0415();
        //                                cmn.PkD0415.UserId = dataRow[(int)Common.D0415ClmIdx.UpdtID].ToString();
        //                                string active = "";
        //                                string authLv = "";
        //                                if (!cmn.Dba.IsAuthrizedCMUser(ref active, ref authLv))
        //                                {
        //                                    // 利用者登録なし
        //                                    isValid = false;
        //                                }

        //                                // EM 担当者チェック
        //                                cmn.IkM0010 = new IkM0010();
        //                                cmn.IkM0010.TanCd = dataRow[(int)Common.D0415ClmIdx.UpdtID].ToString();
        //                                cmn.IkM0010.Passwd = "";
        //                                bool isPasswdFree = true;
        //                                string userName = "";
        //                                string atgCd = "";
        //                                if (!cmn.Dba.IsAuthrizedEMUser(isPasswdFree, ref userName, ref atgCd))
        //                                {
        //                                    // 担当者登録なし
        //                                    isValid = false;
        //                                }
        //                            }
        //                            break;

        //                        case (int)Common.D0415ClmIdx.UpdtDt:
        //                            {
        //                                // 日時妥当性チェック
        //                                DateTime dt;
        //                                if (!DateTime.TryParse(dataRow[(int)Common.D0415ClmIdx.UpdtDt].ToString(), out dt))
        //                                {
        //                                    // 不正な書式
        //                                    isValid = false;
        //                                }
        //                                else
        //                                {
        //                                    // OK なら日時に変換して上書き
        //                                    dataRow.SetField<string>(columnIndex, dt.ToString());
        //                                }
        //                            }
        //                            break;
        //                    }

        //                    // 不正なデータが見つかった時点でチェック打ち切り
        //                    if (isValid == false)
        //                    {
        //                        // 更新系ボタンを無効化
        //                        SetEnableDisableUpdatingButtons();

        //                        // 書式不正あり
        //                        string msgBodyExtStr = string.Format(Common.MSG_BODY_EXT_STR_CSV_ERROR, rowIndex + 1, cmtArr[0]);
        //                        Debug.WriteLine(Common.MSGBOX_TXT_ERR + ": " + MethodBase.GetCurrentMethod().Name + "ReturnCode = :" + msgBodyExtStr);
        //                        cmn.ShowMessageBox(Common.KCM_PGM_ID, Common.MSG_CD_406, Common.MSG_TYPE_E, MessageBoxButtons.OK,
        //                                           Common.MSGBOX_TXT_ERR, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, msgBodyExtStr);
        //                        break;
        //                    }
        //                }

        //                // 不正なデータが見つかった時点でチェック打ち切り
        //                if (isValid == false)
        //                {
        //                    break;
        //                }
        //            }
        //        }
    }
}
